/*-
 * #%L
 * HAPI FHIR JPA Model
 * %%
 * Copyright (C) 2014 - 2024 Smile CDR, Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package ca.uhn.fhir.jpa.model.entity;

import jakarta.persistence.*;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.search.engine.backend.types.Projectable;
import org.hibernate.search.mapper.pojo.mapping.definition.annotation.GenericField;

import java.time.LocalDate;
import java.util.Date;
import java.util.Optional;
import java.util.StringJoiner;

import static ca.uhn.fhir.jpa.model.entity.ResourceSearchUrlWithPartitionEntity.IDX_SEARCH_URL_PARTITION_ID;
import static ca.uhn.fhir.jpa.model.entity.ResourceSearchUrlWithPartitionEntity.PARTITION_ID;
import static ca.uhn.fhir.jpa.model.entity.ResourceSearchUrlWithPartitionEntity.RES_SEARCH_URL_COLUMN_NAME;

/**
 * This entity is used to enforce uniqueness on a given search URL being
 * used as a conditional operation URL, e.g. a conditional create or a
 * conditional update. When we perform a conditional operation that is
 * creating a new resource, we store an entity with the conditional URL
 * in this table. The URL is the PK of the table, so the database
 * ensures that two concurrent threads don't accidentally create two
 * resources with the same conditional URL.
 */
@Entity
@Table(
		name = "HFJ_RES_SEARCH_URL_PARTITION_ID",
		uniqueConstraints = {
			@UniqueConstraint(
					name = IDX_SEARCH_URL_PARTITION_ID,
					columnNames = {RES_SEARCH_URL_COLUMN_NAME, PARTITION_ID})
		},
		indexes = {
			@Index(name = "IDX_RESSEARCHURL_RES", columnList = "RES_ID"),
			@Index(name = "IDX_RESSEARCHURL_TIME", columnList = "CREATED_TIME")
		})
// LUKETODO:  enhance javadoc
public class ResourceSearchUrlWithPartitionEntity {
	public static final String RESSEARCHURLPARTITTION_ID = "RESSEARCHURLPARTITTION_ID ";
	public static final String RES_SEARCH_URL_COLUMN_NAME = "RES_SEARCH_URL";
	public static final String PARTITION_ID = "PARTITION_ID";

	public static final int RES_SEARCH_URL_LENGTH = 768;

	public static final String IDX_SEARCH_URL_PARTITION_ID = "IDX_SEARCH_URL_PARTITION_ID";
	public static final String SEQ_RESSEARCHURLPARTITTION_ID = "SEQ_RESSEARCHURLPARTITTION_ID";

	// We can't use a nullable partition ID as part of a composite primary key, so we need a unique constraint instead
	// That means we need an autogenerated PK
	@Id
	@GenericGenerator(
			name = SEQ_RESSEARCHURLPARTITTION_ID,
			type = ca.uhn.fhir.jpa.model.dialect.HapiSequenceStyleGenerator.class)
	@GeneratedValue(strategy = GenerationType.AUTO, generator = SEQ_RESSEARCHURLPARTITTION_ID)
	@Column(name = RESSEARCHURLPARTITTION_ID)
	@GenericField(projectable = Projectable.YES)
	private Long myId;

	@Column(name = RES_SEARCH_URL_COLUMN_NAME, length = RES_SEARCH_URL_LENGTH, nullable = false)
	// Weird field name isto ensure that this the first key in the index
	private String mySearchUrl;

	@Column(name = PARTITION_ID, nullable = true, insertable = true, updatable = false)
	// Weird field name isto ensure that this the second key in the index
	private Integer myPartitionId;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(
			name = "RES_ID",
			nullable = false,
			updatable = false,
			foreignKey = @ForeignKey(name = "FK_RES_SEARCH_URL_RESOURCE"))
	private ResourceTable myResourceTable;

	@Column(name = "RES_ID", updatable = false, nullable = false, insertable = false)
	private Long myResourcePid;

	@Column(name = "PARTITION_DATE", nullable = true, insertable = true, updatable = false)
	private LocalDate myPartitionDate;

	@Column(name = "CREATED_TIME", nullable = false)
	@Temporal(TemporalType.TIMESTAMP)
	private Date myCreatedTime;

	public Long getId() {
		return myId;
	}

	public void setId(Long theId) {
		myId = theId;
	}

	public String getSearchUrl() {
		return mySearchUrl;
	}

	public ResourceSearchUrlWithPartitionEntity setSearchUrl(String theSearchUrl) {
		mySearchUrl = theSearchUrl;
		return this;
	}

	public Integer getPartitionId() {
		return myPartitionId;
	}

	public ResourceSearchUrlWithPartitionEntity setPartitionId(Integer thePartitionId) {
		myPartitionId = thePartitionId;
		return this;
	}

	public static ResourceSearchUrlWithPartitionEntity from(String theUrl, ResourceTable theResourceTable) {
		final Optional<PartitionablePartitionId> optPartitionId =
				Optional.ofNullable(theResourceTable.getPartitionId());

		return new ResourceSearchUrlWithPartitionEntity()
				.setSearchUrl(theUrl)
				.setPartitionId(optPartitionId
						.map(PartitionablePartitionId::getPartitionId)
						.orElse(null))
				.setPartitionDate(optPartitionId
						.map(PartitionablePartitionId::getPartitionDate)
						.orElse(null))
				.setResourceTable(theResourceTable)
				.setCreatedTime(new Date());
	}

	public Long getResourcePid() {
		if (myResourcePid != null) {
			return myResourcePid;
		}
		return myResourceTable.getResourceId();
	}

	public ResourceSearchUrlWithPartitionEntity setResourcePid(Long theResourcePid) {
		myResourcePid = theResourcePid;
		return this;
	}

	public ResourceTable getResourceTable() {
		return myResourceTable;
	}

	public ResourceSearchUrlWithPartitionEntity setResourceTable(ResourceTable myResourceTable) {
		this.myResourceTable = myResourceTable;
		return this;
	}

	public Date getCreatedTime() {
		return myCreatedTime;
	}

	public ResourceSearchUrlWithPartitionEntity setCreatedTime(Date theCreatedTime) {
		myCreatedTime = theCreatedTime;
		return this;
	}

	public LocalDate getPartitionDate() {
		return myPartitionDate;
	}

	public ResourceSearchUrlWithPartitionEntity setPartitionDate(LocalDate thePartitionDate) {
		myPartitionDate = thePartitionDate;
		return this;
	}

	@Override
	public String toString() {
		return new StringJoiner(", ", ResourceSearchUrlWithPartitionEntity.class.getSimpleName() + "[", "]")
				.add("myId=" + myId)
				.add("mySearchUrl='" + mySearchUrl + "'")
				.add("myPartitionId=" + myPartitionId)
				.add("myResourceTable=" + myResourceTable)
				.add("myResourcePid=" + myResourcePid)
				.add("myPartitionDate=" + myPartitionDate)
				.add("myCreatedTime=" + myCreatedTime)
				.toString();
	}
}
